import os
import telebot
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
from .models import Premise
from django.contrib.auth.models import User

# Initialize bot
BOT_TOKEN = ''
bot = telebot.TeleBot(BOT_TOKEN)

# User states
USER_STATES = {}

class UserState:
    def __init__(self):
        self.current_step = None
        self.data = {}
    
    def reset(self):
        self.current_step = None
        self.data = {}

from django.contrib.auth import get_user_model
User = get_user_model()

def get_or_create_user(telegram_user):
    """Get or create Django user from Telegram user"""
    username = f"tg_{telegram_user.id}"
    
    try:
        return User.objects.get(username=username)
    except User.DoesNotExist:
        # Handle cases where Telegram user doesn't have first/last names
        first_name = telegram_user.first_name or "Telegram"
        last_name = telegram_user.last_name or "User"
        
        return User.objects.create_user(
            username=username,
            first_name=first_name,
            last_name=last_name,
            password=None  # No password for Telegram users
        )

# Step handlers
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è - –ë—Ä–æ–∫–µ—Ä–±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π /newobject —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç.")

# –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç - –ù–∞–∑–≤–∞–Ω–∏–µ
@bot.message_handler(commands=['newobject'])
def start_new_object(message):
    chat_id = message.chat.id
    USER_STATES[chat_id] = UserState()
    USER_STATES[chat_id].current_step = 'name'
    bot.send_message(chat_id, "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç.\n–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –®–æ—Å—Å–µ
@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'name')
def process_name(message):
    chat_id = message.chat.id
    USER_STATES[chat_id].data['name'] = message.text
    USER_STATES[chat_id].current_step = 'highway'

    markup = ReplyKeyboardMarkup(one_time_keyboard=True,
                                 row_width=2,
                                 resize_keyboard=True,)
    markup.add('–≤ —á–µ—Ä—Ç–µ –ú–ö–ê–î',
                '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–µ',
                '–î–º–∏—Ç—Ä–æ–≤—Å–∫–æ–µ',
                '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–µ',
                '–©–µ–ª–∫–æ–≤—Å–∫–æ–µ',
                '–ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–µ',
                '–ù–æ–≤–æ—Ä—è–∑–∞–Ω—Å–∫–æ–µ',
                '–ö–∞—à–∏—Ä—Å–∫–æ–µ',
                '–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å—Å–∫–æ–µ',
                '–ö–∞–ª—É–∂—Å–∫–æ–µ',
                '–ö–∏–µ–≤—Å–∫–æ–µ',
                '–ú–∏–Ω—Å–∫–æ–µ',
                '–ù–æ–≤–æ—Ä–∏–∂—Å–∫–æ–µ',
                '–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫–æ–µ',
                '–ü—è—Ç–Ω–∏—Ü–∫–æ–µ',
                '–ú-4',
                '–ú-11')
    bot.send_message(chat_id, "–ö–∞–∫–æ–µ —à–æ—Å—Å–µ?", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –®–æ—Å—Å–µ –∏ –∑–∞–ø—Ä–æ—Å –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç
@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'highway')
def process_highway(message):
    chat_id = message.chat.id
    USER_STATES[chat_id].data['highway'] = message.text
    USER_STATES[chat_id].current_step = 'location_coords'
    bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True))

# –¢–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ê—Ä–µ–Ω–¥–∞/–ü—Ä–æ–¥–∞–∂–∞
@bot.message_handler(content_types=['location'], 
                    func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'location_coords')
def process_location_coords(message):
    chat_id = message.chat.id
    location = message.location
    USER_STATES[chat_id].data['latitude'] = location.latitude
    USER_STATES[chat_id].data['longitude'] = location.longitude
    USER_STATES[chat_id].current_step = 'offer_type'
    
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–ü—Ä–æ–¥–∞–∂–∞', '–ê—Ä–µ–Ω–¥–∞')
    bot.send_message(chat_id, "–ê—Ä–µ–Ω–¥–∞ –∏–ª–∏ –ü—Ä–æ–¥–∞–∂–∞?", reply_markup=markup)

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'location_coords')
def process_location_coords(message):
    chat_id = message.chat.id
    if not message.location:
        bot.send_message(chat_id, "–ù—É–∂–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∞üìç\n–∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é —Ç—É—Ç ‚§µ")
        return
    location = message.location
    USER_STATES[chat_id].data['latitude'] = location.latitude
    USER_STATES[chat_id].data['longitude'] = location.longitude
    USER_STATES[chat_id].current_step = 'offer_type'
    
    # # –°–æ–∑–¥–∞—Ç—å 2 –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–∞–∂–∞, –ê—Ä–µ–Ω–¥–∞
    # markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    # markup.add('–ê—Ä–µ–Ω–¥–∞', '–ü—Ä–æ–¥–∞–∂–∞')
    
    # bot.send_message(chat_id, "–¢–∞–∫ –ê—Ä–µ–Ω–¥–∞ –∏–ª–∏ –ü—Ä–æ–¥–∞–∂–∞?", reply_markup=markup)

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'offer_type' 
                    and message.text in ['–ê—Ä–µ–Ω–¥–∞', '–ü—Ä–æ–¥–∞–∂–∞'])
def process_offer_type(message):
    chat_id = message.chat.id
    USER_STATES[chat_id].data['offer_type'] = message.text.lower()
    USER_STATES[chat_id].current_step = 'industrial_area'
    
    # Remove the keyboard after selection
    bot.send_message(chat_id, 
                    "–ö–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ-—Å–∫–ª–∞–¥—Å–∫–æ–π —á–∞—Å—Ç–∏?",
                    reply_markup=ReplyKeyboardRemove())

def is_float(value):
    try:
        float(value)
        return True
    except ValueError:
        return False

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'industrial_area')
def process_industrial_area(message):
    chat_id = message.chat.id
    if not is_float(message.text):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–ü–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥–∞, –∫–≤.–º)")
        return
    
    USER_STATES[chat_id].data['industrial_area'] = float(message.text)
    USER_STATES[chat_id].current_step = 'mezzanine_area'
    bot.send_message(chat_id, "–ö–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å –º–µ–∑–æ–Ω–∏–Ω–∞?")

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'mezzanine_area')
def process_mezzanine_area(message):
    chat_id = message.chat.id
    if not is_float(message.text):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–ü–ª–æ—â–∞–¥—å –º–µ–∑–æ–Ω–∏–Ω–∞, –∫–≤.–º)")
        return
    
    USER_STATES[chat_id].data['mezzanine_area'] = float(message.text)
    USER_STATES[chat_id].current_step = 'office_area'
    bot.send_message(chat_id, "–ö–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å –æ—Ñ–∏—Å–æ–≤?")

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'office_area')
def process_office_area(message):
    chat_id = message.chat.id
    if not is_float(message.text):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–ü–ª–æ—â–∞–¥—å –æ—Ñ–∏—Å–∞, –∫–≤.–º)")
        return
    
    USER_STATES[chat_id].data['office_area'] = float(message.text)
    
    if USER_STATES[chat_id].data['offer_type'] == '–∞—Ä–µ–Ω–¥–∞':
        USER_STATES[chat_id].current_step = 'industrial_price'
        bot.send_message(chat_id, "–ö–∞–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã —Å–∫–ª–∞–¥–∞? (–∫–≤.–º/–≥–æ–¥)")
    else:
        USER_STATES[chat_id].current_step = 'sale_price'
        bot.send_message(chat_id, "–ö–∞–∫–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –ù–î–°?")

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'industrial_price')
def process_industrial_price(message):
    chat_id = message.chat.id
    if not is_float(message.text):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã —Å–∫–ª–∞–¥–∞, —Ä—É–±./–∫–≤.–º/–≥–æ–¥)")
        return
    
    USER_STATES[chat_id].data['industrial_price'] = float(message.text)
    USER_STATES[chat_id].current_step = 'mezzanine_price'
    bot.send_message(chat_id, "–ö–∞–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –º–µ–∑–æ–Ω–∏–Ω–∞? (–∫–≤.–º/–≥–æ–¥)")

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'mezzanine_price')
def process_mezzanine_price(message):
    chat_id = message.chat.id
    if not is_float(message.text):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –º–µ–∑–æ–Ω–∏–Ω–∞, —Ä—É–±./–∫–≤.–º/–≥–æ–¥)")
        return
    
    USER_STATES[chat_id].data['mezzanine_price'] = float(message.text)
    USER_STATES[chat_id].current_step = 'office_price'
    bot.send_message(chat_id, "–ö–∞–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞")

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'office_price')
def process_office_price(message):
    chat_id = message.chat.id
    if not is_float(message.text):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞, —Ä—É–±./–∫–≤.–º/–≥–æ–¥)")
        return
    
    USER_STATES[chat_id].data['office_price'] = float(message.text)
    show_confirmation(chat_id)

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'sale_price')
def process_sale_price(message):
    chat_id = message.chat.id
    if not is_float(message.text):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏, —Ä—É–±.)")
        return
    
    USER_STATES[chat_id].data['sale_price'] = float(message.text)
    show_confirmation(chat_id)

def show_confirmation(chat_id):
    user_data = USER_STATES[chat_id].data
    offer_type = user_data['offer_type']
    
    text = "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ:\n\n"
    text += f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['name']}\n"
    text += f"üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user_data['highway']}\n"
    text += f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {user_data['latitude']}, {user_data['longitude']}\n"
    text += f"üí∞ –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {offer_type.capitalize()}\n"
    text += f"üè≠ –ü–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥/–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {user_data['industrial_area']} –∫–≤.–º\n"
    text += f"üèó –ü–ª–æ—â–∞–¥—å –º–µ–∑–æ–Ω–∏–Ω–∞: {user_data['mezzanine_area']} –∫–≤.–º\n"
    text += f"üè¢ –ü–ª–æ—â–∞–¥—å –æ—Ñ–∏—Å–∞: {user_data['office_area']} –∫–≤.–º\n"
    
    if offer_type == '–∞—Ä–µ–Ω–¥–∞':
        text += f"üè≠ –°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã —Å–∫–ª–∞–¥–∞: {user_data['industrial_price']} —Ä—É–±./–∫–≤.–º/–≥–æ–¥\n"
        text += f"üèó –°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –º–µ–∑–æ–Ω–∏–Ω–∞: {user_data['mezzanine_price']} —Ä—É–±./–∫–≤.–º/–≥–æ–¥\n"
        text += f"üè¢ –°—Ç–∞–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞: {user_data['office_price']} —Ä—É–±./–∫–≤.–º/–≥–æ–¥\n"
    else:
        text += f"üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {user_data['sale_price']} —Ä—É–±. (–±–µ–∑ –ù–î–°)\n"
    
    text += "\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–∞', '–ù–µ—Ç')
    
    USER_STATES[chat_id].current_step = 'confirmation'
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'confirmation' 
                    and message.text.lower() == '–¥–∞')
def process_confirmation_yes(message):
    chat_id = message.chat.id
    user_data = USER_STATES[chat_id].data
    
    # Get or create Django user
    telegram_user = message.from_user
    user = get_or_create_user(telegram_user)
    
    # Create premise object
    premise = Premise(
        creator=user,
        name=user_data['name'],
        highway=user_data['highway'],
        latitude=user_data['latitude'],
        longitude=user_data['longitude'],
        offer_type=user_data['offer_type'],
        industrial_area=user_data['industrial_area'],
        mezzanine_area=user_data['mezzanine_area'],
        office_area=user_data['office_area'],
    )
    
    if user_data['offer_type'] == '–∞—Ä–µ–Ω–¥–∞':
        premise.industrial_price = user_data['industrial_price']
        premise.mezzanine_price = user_data['mezzanine_price']
        premise.office_price = user_data['office_price']
    else:
        premise.sale_price = user_data['sale_price']
    
    premise.save()
    
    bot.send_message(chat_id, "‚úÖ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=ReplyKeyboardRemove())
    USER_STATES[chat_id].reset()

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id, UserState()).current_step == 'confirmation' 
                    and message.text.lower() == '–Ω–µ—Ç')
def process_confirmation_no(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    USER_STATES[chat_id].reset()

@bot.message_handler(commands=['cancel'])
def cancel_operation(message):
    chat_id = message.chat.id
    if chat_id in USER_STATES:
        USER_STATES[chat_id].reset()
    bot.send_message(chat_id, "–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

def start_polling():
    bot.infinity_polling()